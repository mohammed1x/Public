#!/bin/bash
#echo "Provided arguments: $1 $2 $3"
#echo "Expression is:"
# Function to calculate the result in decimal format

# Check if bc exists
if ! command -v bc &>/dev/null; then
	# Install bc and tr if they don't exist
	sudo apt install bc -y
	apt install bc -y
	sudo apt install tr -y
	apt install tr -y
fi

decimal_result() {
	result=$(calc -d "${clean_query}")
	echo -e "\n$result" | sed 's/^[[:space:]]*//'
}

# Function to calculate the result in fractional format
# Function to calculate the result in fractional format
fractional_result() {
	resultf=$(python3 ~/scripts/abdcalc/decimal_to_fraction.py "$(decimal_result)")
	echo "$resultf"
}

# Function to display help message
help() {
	echo -e "Usage:"
	echo "-f: output in fraction"
	echo "-d: output in decimals"
	echo "-fd / -df: output in both fraction and decimals"
	echo "nothing: output in both decimal and fraction"
}

graph() {
	repetitions=$1
	echo "$repetitions"
	spark $(echo "$plots" | tr ' ' '\n' | tac | while read -r num; do
		for ((i = 0; i < repetitions; i++)); do
			echo -n "$num "
		done

	done | rev)
}

solve_with_scale() {
	#echo "scale=$scale"
	#echo "expression=$expression"
	scale_result="$(echo "scale=${scale}; ${expression}" | bc -w -l | tr -d '\n\\')"
	resultf=$(python3 ~/scripts/abdcalc/decimal_to_fraction.py "${scale_result}" | tr -d '\n\\')

	echo -e "${scale_result}\n"

}
print_tables() {
	#sed -n '/<tables2to15>/,/<\/tables2to15>/' ~/scripts/abdc | sed '/tables2to15/d'
	#sed -n '/<tables2to15>/,/<\/tables2to15>/ { /<tables2to15>/d; /<\/tables2to15>/d; p }' ~/scripts/abdc

	<<'COMMENT'

<tables2to15>

2 x 1 = 2
2 x 2 = 4
2 x 3 = 6
2 x 4 = 8
2 x 5 = 10
2 x 6 = 12
2 x 7 = 14
2 x 8 = 16
2 x 9 = 18
2 x 10 = 20 

3 x 1 = 3
3 x 2 = 6
3 x 3 = 9
3 x 4 = 12
3 x 5 = 15
3 x 6 = 18
3 x 7 = 21
3 x 8 = 24
3 x 9 = 27
3 x 10 = 30

4 x 1 = 4
4 x 2 = 8
4 x 3 = 12
4 x 4 = 16
4 x 5 = 20
4 x 6 = 24
4 x 7 = 28
4 x 8 = 32
4 x 9 = 36
4 x 10 = 40

5 x 1 = 5
5 x 2 = 10
5 x 3 = 15
5 x 4 = 20
5 x 5 = 25
5 x 6 = 30
5 x 7 = 35
5 x 8 = 40
5 x 9 = 45
5 x 10 = 50

6 x 1 = 6
6 x 2 = 12
6 x 3 = 18
6 x 4 = 24
6 x 5 = 30
6 x 6 = 36
6 x 7 = 42
6 x 8 = 48
6 x 9 = 54
6 x 10 = 60

7 x 1 = 7
7 x 2 = 14
7 x 3 = 21
7 x 4 = 28
7 x 5 = 35
7 x 6 = 42
7 x 7 = 49
7 x 8 = 56
7 x 9 = 63
7 x 10 = 70

8 x 1 = 8
8 x 2 = 16
8 x 3 = 24
8 x 4 = 32
8 x 5 = 40
8 x 6 = 48
8 x 7 = 56
8 x 8 = 64
8 x 9 = 72
8 x 10 = 80

9 x 1 = 9
9 x 2 = 18
9 x 3 = 27
9 x 4 = 36
9 x 5 = 45
9 x 6 = 54
9 x 7 = 63
9 x 8 = 72
9 x 9 = 81
9 x 10 = 90

10 x 1 = 10
10 x 2 = 20
10 x 3 = 30
10 x 4 = 40
10 x 5 = 50
10 x 6 = 60
10 x 7 = 70
10 x 8 = 80
10 x 9 = 90
10 x 10 = 100

11 x 1 = 11
11 x 2 = 22
11 x 3 = 33
11 x 4 = 44
11 x 5 = 55
11 x 6 = 66
11 x 7 = 77
11 x 8 = 88
11 x 9 = 99
11 x 10 = 110

12 x 1 = 12
12 x 2 = 24
12 x 3 = 36
12 x 4 = 48
12 x 5 = 60
12 x 6 = 72
12 x 7 = 84
12 x 8 = 96
12 x 9 = 108
12 x 10 = 120

13 x 1	= 13
13 x 2	= 26
13 x 3	= 39
13 x 4	= 52
13 x 5	= 65
13 x 6	= 78
13 x 7	= 91
13 x 8	= 104
13 x 9	= 117
13 x 10	= 130

14 x 1 = 14
14 x 2 = 28
14 x 3 = 42
14 x 4 = 56
14 x 5 = 70
14 x 6 = 84
14 x 7 = 98
14 x 8 = 112
14 x 9 = 126
14 x 10 = 140

15 x 1 = 15
15 x 2 = 30
15 x 3 = 45
15 x 4 = 60
15 x 5 = 75
15 x 6 = 90
15 x 7 = 105
15 x 8 = 120
15 x 9 = 135
15 x 10 = 150

</tables2to15>   
COMMENT
}

# Define the function
multiplication_table() {
	<<'COMMENT'
	# Check if the number of arguments is not equal to 1
	if [ "$#" -ne 1 ]; then
		echo "Usage: multiplication_table <number>"
		return 1
	fi

	local number=$1

	# Print the multiplication table header
	echo "Multiplication table of $number:"

	# Loop to calculate and print the multiplication table
	for ((i = 1; i <= 10; i++)); do
		echo "$number x $i = $((number * i))"
	done
COMMENT

	# Check if there are no arguments
	if [ "$#" -eq 0 ]; then
		echo "Usage: multiplication_table <number1> <number2> ... <range1> <range2> ..."
		return 1
	fi

	# Loop through all the arguments
	for arg in "$@"; do
		# Check if the argument is a range
		if [[ "$arg" == *-* ]]; then
			start=$(echo "$arg" | cut -d'-' -f1)
			end=$(echo "$arg" | cut -d'-' -f2)
			# Loop through the range and print the multiplication table for each number
			for ((number = start; number <= end; number++)); do
				echo "$number "
				for ((i = 1; i <= 10; i++)); do
					echo "$number x $i = $((number * i))"
				done
				echo # Add a blank line between each multiplication table
			done
		else
			# Print the multiplication table for a single number
			echo "Multiplication table of $arg:"
			for ((i = 1; i <= 10; i++)); do
				echo "$arg x $i = $((arg * i))"
			done
			echo # Add a blank line between each multiplication table
		fi
	done
}

# Check if arguments are provided
if [ "$1" ]; then
	# Check if the first argument is not one of the options
	if [[ ! "$1" =~ (-f|-d|-fd|-df|-h|-g|-s|-t) ]]; then
		# Concatenate all arguments into a single string for processing
		raw_query="${*:1}"
		# Clean the query (if needed)
		clean_query=$raw_query
		# Display results in both decimal and fraction formats
		decimal_result
		fractional_result
	else
		# Process based on the provided option
		case $1 in
		"-d")
			# Output in decimal format
			raw_query="${*:2}"
			clean_query=$raw_query
			#echo "rq$raw_query"
			decimal_result
			;;
		"-f")
			# Output in fractional format
			raw_query="${*:2}"
			clean_query=$raw_query
			fractional_result
			;;
		"-df" | "-fd")
			# Output in both decimal and fractional formats
			raw_query="${*:2}"
			clean_query=$raw_query
			decimal_result

			fractional_result
			;;
		"-s")
			scale=$2
			expression="${*:3}"
			solve_with_scale
			;;
		"-h")
			# Display help message
			help
			;;
		"-g")
			# Plot the graph
			plots="${*:2}"
			graph 1 | pv -qL 50
			;;
		"-t")

			print_tables
			# Call the function with arguments separated by spaces
			multiplication_table "${*:2}"

			;;

		esac
	fi
else
	# No arguments provided, display help message
	help
fi
